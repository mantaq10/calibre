# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2020, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods, hash_literals

from elementmaker import E
from gettext import gettext as _

from book_list.globals import get_session_data
from book_list.theme import get_color
from dom import clear, svgicon
from read_book.globals import runtime, ui_operations


def all_actions():
    def a(icon, text, func):
        return {'icon': icon, 'text': text, 'function_name': func}

    if not all_actions.ans:
        all_actions.ans = {
            'copy': a('copy', _('Copy to clipboard'), 'copy_to_clipboard'),
            'lookup': a('library', _('Lookup/search selected word'), 'lookup'),
            'highlight': a('highlight', _('Highlight selection'), 'create_highlight'),
            'search_net': a('search', _('Search for selection on the net'), 'internet_search'),
            'clear': a('close', _('Clear selection'), 'clear_selection'),
        }
    return all_actions.ans


class SelectionBar:

    def __init__(self, view):
        self.view = view

    def build_bar(self, notes):
        c = self.container
        max_width = 'min(50rem, 90vw)' if self.supports_css_min_max else '50rem'
        bar_container = E.div(
            style='position: absolute; border: solid 1px currentColor; border-radius: 5px;'
            'left: 0; top: 0; pointer-events: auto; display: flex; flex-direction: column;'
            'background-color: {}; max-width: {}'.format(get_color("window-background"), max_width),

            E.div(style='height: 4ex; display: flex; align-items: center; padding: 5px; justify-content: center'),

            E.hr(style='border-top: solid 1px; margin: 0; padding: 0; display: none'),

            E.div(
                style='display: none; padding: 5px;',
                E.div(),
            ),
        )
        bar = bar_container.firstChild
        c.appendChild(bar_container)

        def cb(icon, tooltip, callback):
            ans = svgicon(icon, '3ex', '3ex', tooltip)
            ans.addEventListener('click', def(ev):
                callback(ev)
                self.view.focus_iframe()
            )
            ans.classList.add('simple-link')
            ans.style.marginLeft = ans.style.marginRight = '0.5rem'
            return ans

        actions = all_actions()
        sd = get_session_data()
        for acname in sd.get('selection_bar_actions'):
            ac = actions[acname]
            if ac:
                bar.appendChild(cb(ac.icon, ac.text, self[ac.function_name]))
        self.show_notes(bar_container, notes)
        return bar_container

    @property
    def supports_css_min_max(self):
        return not runtime.is_standalone_viewer or runtime.QT_VERSION >= 0x050f00

    @property
    def container(self):
        return document.getElementById('book-selection-bar-overlay')

    @property
    def bar(self):
        return self.container.firstChild

    def hide(self):
        self.container.style.display = 'none'

    def show(self):
        sd = get_session_data()
        if not self.view.create_annotation.is_visible and sd.get('show_selection_bar'):
            self.container.style.display = 'block'

    @property
    def is_visible(self):
        return self.container.style.display is not 'none'

    def copy_to_clipboard(self):
        if self.view.currently_showing.selection.text:
            ui_operations.copy_selection(self.view.currently_showing.selection.text)

    def lookup(self):
        if ui_operations.toggle_lookup:
            ui_operations.toggle_lookup(True)
        else:
            self.view.overlay.show_word_actions(self.view.currently_showing.selection.text)

    def internet_search(self):
        text = self.view.currently_showing.selection.text
        if text:
            q = encodeURIComponent(text)
            url = get_session_data().get('net_search_url').format(q=q)
            ui_operations.open_url(url)

    def clear_selection(self):
        self.view.on_handle_shortcut({'name': 'clear_selection'})

    def create_highlight(self):
        self.view.initiate_create_annotation(True)

    def show_notes(self, bar, notes):
        notes = (notes or "").strip()
        if not notes:
            return
        notes_container = bar.lastChild
        c = notes_container.lastChild
        notes_container.style.display = notes_container.previousSibling.style.display = 'block'
        c.style.overflow = 'auto'
        if self.supports_css_min_max:
            c.style.maxHeight = 'min(20ex, 40vh)'
        else:
            c.style.maxHeight = '20ex'
        current_block = ''

        def add_para():
            nonlocal current_block
            c.appendChild(E.p(current_block))
            if c.childNodes.length > 1:
                c.lastChild.style.marginTop = '2ex'
            current_block = ''

        for line in notes.splitlines():
            if not line or not line.strip():
                if current_block:
                    add_para()
                    continue
            current_block += line + '\n'
        if current_block:
            add_para()

    def update_position(self):
        container = self.container
        clear(container)
        cs = self.view.currently_showing.selection
        if not cs or cs.empty:
            return self.hide()

        if not cs.start.onscreen and not cs.end.onscreen:
            return self.hide()

        margins = {
            'top': document.getElementById('book-top-margin').offsetHeight,
            'bottom': document.getElementById('book-bottom-margin').offsetHeight,
            'left': document.getElementById('book-left-margin').offsetWidth,
            'right': document.getElementById('book-right-margin').offsetWidth,
        }

        def map_boundary(x):
            return {'x': (x.x or 0) + margins.left, 'y': (x.y or 0) + margins.top, 'height': x.height or 0, 'onscreen': x.onscreen}

        bar = self.build_bar(self.view.annotations_manager.notes_for_highlight(cs.annot_id))
        start = map_boundary(cs.start)
        end = map_boundary(cs.end)
        self.show()
        end_after_start = start.y < end.y or (start.y is end.y and start.x < end.x)

        # vertical position
        bar_height = bar.offsetHeight
        buffer = 2
        if end_after_start:
            has_space_below = end.y + end.height < container.offsetHeight - bar_height - buffer
            put_below = has_space_below
        else:
            has_space_above = end.y + bar_height - buffer > 0
            put_below = not has_space_above
        top = (end.y + end.height + buffer) if put_below else (end.y - bar_height - buffer)
        top = max(buffer, min(top, container.offsetHeight - bar_height - buffer))
        bar.style.top = top + 'px'
        bar.style.flexDirection = 'column' if put_below else 'column-reverse'

        # horizontal position
        bar_width = bar.offsetWidth
        left = end.x - bar_width // 2
        # - 10 ensures we dont cover scroll bar
        if cs.drag_mouse_position.x?:
            mouse = map_boundary(cs.drag_mouse_position)
            left = mouse.x - bar_width // 2
        left = max(buffer, min(left, container.offsetWidth - bar_width - buffer - 10))
        bar.style.left = left + 'px'
